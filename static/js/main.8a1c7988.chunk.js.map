{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/App/App.styled.jsx","components/App/App.jsx","index.js"],"names":["ConteinerForm","styled","div","Button","button","Label","label","Input","input","ContactForm","props","useState","name","setName","number","setNumber","contact","resetState","onSubmit","event","preventDefault","type","pattern","title","required","onChange","currentTarget","value","List","ul","Conteiner","Info","p","Contact","id","onDelete","onClick","ContactList","contacts","map","defaultProps","Title","h4","Filter","setFilterToState","toUpperCase","App","setContacts","filter","setFilter","localstorageKeyName","useEffect","localStorage","getItem","parseContacts","JSON","parse","setItem","stringify","filterContacts","toLowerCase","includes","prevContacts","newContact","uuidv4","find","alert","filterData","contactId","el","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a1c7988.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const ConteinerForm = styled.div`\n  width: 300px;\n  padding: 20px;\n  display: block;\n  border: 1px solid #477405;\n`;\n\nexport const Button = styled.button`\n  margin: 5px 10px;\n  background-color: #0a0131ab;\n  color: white;\n  border-radius: 7px;\n  border-color: #201068ab;\n  cursor: pointer;\n  transition-delay: 250ms;\n  transition-timing-function: cubic-bezier(0.29, 1.01, 1, -0.68);\n  &:hover {\n    background-color: #5b5bbee6;\n    color: #0a0131ab;\n    border-color: #0a0131ab;\n  }\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  max-width: 200px;\n`;\nexport const Input = styled.input`\n  border-radius: 2px;\n\n  &:focus {\n    border-color: #4015fffb;\n    border-width: medium;\n  }\n`;\n","import React, { useState } from 'react';\nimport { ConteinerForm, Label, Button, Input } from './ContactForm.styled';\n\nexport default function ContactForm(props) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contact = { name, number };\n\n  const handleChangeName = event => {\n    setName(event.currentTarget.value);\n  };\n\n  const handleChangeNumber = event => {\n    setNumber(event.currentTarget.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    props.onSubmit(contact);\n\n    resetState();\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <ConteinerForm>\n      <form onSubmit={handleSubmit}>\n        <Label>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handleChangeName}\n            value={name}\n          />\n        </Label>\n        <Label>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            onChange={handleChangeNumber}\n            value={number}\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </form>\n    </ConteinerForm>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 10px;\n  margin: 0;\n`;\n","import styled from '@emotion/styled';\nexport const Conteiner = styled.div`\n  display: flex;\n  align-items: baseline;\n`;\nexport const Info = styled.p`\n  margin-right: 10px;\n`;\nexport const Button = styled.button`\n  border-radius: 3px;\n  transition-delay: 250ms;\n  transition-timing-function: cubic-bezier(0.29, 1.01, 1, -0.68);\n  cursor: pointer;\n  &:hover {\n    background-color: #2d2db6e6;\n    color: #f4f3f7ab;\n    border-color: #0a0131ab;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Conteiner, Info, Button } from './Contact.styled';\n\nconst Contact = ({ name, number, id, onDelete }) => (\n  <Conteiner>\n    <Info>{`${name}: ${number}`}</Info>\n    <Button data-id={id} onClick={onDelete}>\n      Delete\n    </Button>\n  </Conteiner>\n);\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\nexport default Contact;\n","import PropTypes from 'prop-types';\nimport { List } from './ContactList.styled';\nimport Contact from 'components/Contact/Contact';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <List>\n    {contacts.map(({ id, name, number }) => {\n      return (\n        <li key={id}>\n          <Contact\n            id={id}\n            name={name}\n            number={number}\n            onDelete={() => onDelete(id)}\n          />\n        </li>\n      );\n    })}\n  </List>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\nContactList.defaultProps = {\n  contacts: [],\n};\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Conteiner = styled.div`\n  padding-bottom: 10px;\n  height: 40px;\n`;\nexport const Title = styled.h4`\n  margin: 5px 0;\n  font-size: 18px;\n  font-weight: 500;\n`;\nexport const Input = styled.input`\n  border-radius: 2px;\n\n  &:focus {\n    border-color: #3493ff;\n    border-width: 4px;\n  }\n`;\n","import { Conteiner, Title, Input } from './Filter.styled';\n\nexport default function Filter(props) {\n  const setFilterValue = event => {\n    props.setFilterToState(event.currentTarget.value.toUpperCase());\n  };\n\n  return (\n    <Conteiner>\n      <Title>Find contacts by name</Title>\n      <Input onChange={setFilterValue} />\n    </Conteiner>\n  );\n}\n","import styled from '@emotion/styled';\nexport const Conteiner = styled.div`\n  padding: 20px 50px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { Conteiner } from './App.styled';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n  const localstorageKeyName = 'contacts';\n\n  useEffect(() => {\n    const contacts = localStorage.getItem(localstorageKeyName);\n    const parseContacts = JSON.parse(contacts);\n    parseContacts && setContacts(parseContacts);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(localstorageKeyName, JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmit = ({ name, number }) => {\n    setContacts(prevContacts => {\n      const newContact = {\n        id: `${uuidv4()}`,\n        name,\n        number,\n      };\n      const duplicateContact = prevContacts.find(contact => {\n        return contact.name === name;\n      });\n      if (duplicateContact) {\n        alert(`${name} вже є у телефонній книзі!!!`);\n        return [...prevContacts];\n      } else {\n        return setContacts(prevContacts => [...prevContacts, newContact]);\n      }\n    });\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prevContacts => prevContacts.filter(el => el.id !== contactId));\n  };\n\n  const setFilterToState = filterData => {\n    setFilter(`${filterData}`);\n  };\n\n  const filterContact = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n  const filterContacts = filterContact();\n\n  return (\n    <Conteiner>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={formSubmit} />\n      <h1>Contacts</h1>\n      <Filter setFilterToState={setFilterToState} />\n      <ContactList contacts={filterContacts} onDelete={deleteContact} />\n    </Conteiner>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}